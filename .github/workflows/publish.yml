name: Publish to PyPI

on:
  push:
    branches: [ main ]
    paths:
      - 'epub_cfi_toolkit/**'
      - 'pyproject.toml'
      - 'README.md'
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Check if version changed
      id: version_check
      run: |
        VERSION=$(python -c "import sys; sys.path.insert(0, '.'); from epub_cfi_toolkit import __version__; print(__version__)")
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT
        
        # Get latest version from PyPI
        LATEST_VERSION=$(pip index versions epub-cfi-toolkit 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n1 || echo "0.0.0")
        echo "pypi_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        
        if [ "$VERSION" != "$LATEST_VERSION" ]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "Version changed from $LATEST_VERSION to $VERSION"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "Version unchanged: $VERSION"
        fi
    
    - name: Run tests
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        pip install -e .[dev]
        pytest
    
    - name: Run linting and type checks
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        flake8 epub_cfi_toolkit
        mypy epub_cfi_toolkit
    
    - name: Build package
      if: steps.version_check.outputs.version_changed == 'true'
      run: python -m build
    
    - name: Publish to PyPI
      if: steps.version_check.outputs.version_changed == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    - name: Create release tag
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag "v${{ steps.version_check.outputs.current_version }}"
        git push origin "v${{ steps.version_check.outputs.current_version }}"